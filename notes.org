* associated constants
- https://github.com/rust-lang/rfcs/pull/1062
- https://github.com/rust-lang/rfcs/issues/1038
- https://github.com/rust-lang/rfcs/pull/884
- https://github.com/rust-lang/rfcs/pull/865
- https://github.com/rust-lang/rust/pull/23606/ 
- https://gist.github.com/freebroccolo/5f43b737cc1c28c96896
* FunctionN, DigestN macro stuff
** hash/mod.rs
pub fn foo() -> [u8; 32] {
  [0; 32]
}

pub fn foo2() -> Arr32<u8> {
  Arr32 :: from_array([0; 32])
}

macro_rules! define_Function_trait {
  ($tname:ident, $sz:expr) => (
    pub trait $tname : Transformation {
      fn final_digest(&mut self) -> [u8; $sz] {
        let mut output = [0u8; $sz];
        self.finalize(&mut output);
        output
      }
    }
  )
}

define_Function_trait!(Function28, 28);
define_Function_trait!(Function32, 32);
define_Function_trait!(Function48, 48);
define_Function_trait!(Function64, 64);

/// a digest is a function that only takes input data and no other
/// parameters.
macro_rules! define_Digest_trait {
  ($tname:ident, $func_tname:ident, $sz:expr) => (
    pub trait $tname : $func_tname + Default {
      fn digest(data: &[u8]) -> [u8; $sz] {
        let hash_fn = &mut Self::default();
        hash_fn.update(data);
        hash_fn.final_digest()
      }

      fn empty_digest() -> [u8; $sz] {
        Self::digest(b"")
      }
    }
  )
}


define_Digest_trait!(Digest28, Function28, 28);
define_Digest_trait!(Digest32, Function32, 32);
define_Digest_trait!(Digest48, Function48, 48);
define_Digest_trait!(Digest64, Function64, 64);

macro_rules! define_Digest_tests {
  ($tname:ident) => (
    #[test]
    pub fn reset() {
      let mut d = super::$tname::new();
      d.reset();

      assert_eq!(d.final_digest(), super::$tname::empty_digest());

      d.update(b"    println!(\"buf = {:?}\n\", buf);");
      d.reset();
      assert_eq!(d.final_digest(), super::$tname::empty_digest());
    }

    #[test]
    pub fn finalize() {
      let mut d = super::$tname::new();
      d.reset();
      assert_eq!(d.final_digest(), super::$tname::empty_digest());

      d.update(b"asdofijqwoeirj");
      d.final_digest();

      assert_eq!(d.final_digest(), super::$tname::empty_digest());
    }

    #[test]
    pub fn update() {
      let mut d = super::$tname::new();
      d.reset();
      assert_eq!(d.final_digest(), super::$tname::empty_digest());

      d.update(b"");
      assert_eq!(d.final_digest(), super::$tname::empty_digest());
    }
  )
}

** hash/sha3.rs
macro_rules! hash_impl_body {
  ($tname:ident, $( $trt:ident ),+) => (
    use hash::{ $( $trt ),+ };

    $(
      impl $trt for $tname {}
    )+

    #[cfg(test)]
    mod digest_tests {
      use hash::Transformation;
      use hash::{ $( $trt ),+ };
      define_Digest_tests!($tname);
    }
  )
}

macro_rules! token_to_expr {
  ($tok:expr) => ($tok)
}

/*
macro_rules! hash_impls {
  (28, $tname:ident) => (
    hash_impl_body!($tname, Function28, Digest28);
  );

  (32, $tname:ident) => (
    hash_impl_body!($tname, Function32, Digest32);
  );

  (48, $tname:ident) => (
    use hash::{Function48, Digest48};
    impl Function48 for $tname {}
    impl Digest48 for $tname {}
  );

  (64, $tname:ident) => (
    use hash::{Function64, Digest64};
    impl Function64 for $tname {}
    impl Digest64 for $tname {}
  );
}
*/


* trashed
** hash/sha3.rs
*** keccak stuff
/// produce a keccak hmac; that is, an hmac done insecurely but its
/// ok because keccak is crazy like that.
/// http://en.wikipedia.org/wiki/Hash-based_message_authentication_code
/// the hmac is: `keccak(secret || msg)`
/// maybe dangerous?
///
/// # Panics
/// - when secret.len() < 16
/// - when msg is empty
pub fn keccak_mac(secret: &[u8], msg: &[u8]) -> arr::Arr32<u8> {
  use hash::{Transformation, Function};

  assert!(secret.len() >= 16, "secret is dangerously small");
  assert!(msg.len() > 0, "msg is empty");

  let mut keccak = h256::new();

  keccak.update(secret);
  keccak.update(msg);
  keccak.final_digest()
}


  mod keccak_mac {
    #[test]
    #[should_panic]
    fn panic_secret() {
      super::super::keccak_mac(b"too short", b"msg");
    }

    #[test]
    #[should_panic]
    fn panic_msg() {
      super::super::keccak_mac(b"0123456789012345", b"");
    }
  }
*** test/sanity()
    assert_eq!(super::keccak_mac(&msg2[..16], &msg2[16..]), expected2);
*** check len test
//  #[test]
//  fn digest_types_sanity() {
//    use super::Digest;
//    macro_rules! check_len {
//      () => ();
//
//      ($tname:path) => (
//        assert_eq!(<$tname as Default>::default().len(),
//                   <$tname as Digest>::size().in_bytes() as usize);
//      );
//
//      ($tname:path, $( $rest:tt )*) => (
//        check_len!($tname);
//        check_len!($( $rest)*);
//      )
//    }
//
//    check_len!(super::Digest28,
//               super::Digest32,
//               super::Digest48,
//               super::Digest64);
//  }
